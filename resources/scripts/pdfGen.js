async function generatePDF()
{
    var doc = new jsPDF("portrait", "mm", "letter");
    var date = new Date();

    // HEADER
    doc.setFont("times", "bold");
    doc.setFontSize(16);
    doc.text(72, 20, 'IRACE Autogenerated report');

    doc.setFont("times", "normal");
    doc.setFontSize(11);
    doc.text(20, 40, 'Date of the report: ' + date)

    // SUMMARY
    doc.setFont("times", "bold");
    doc.setFontSize(14);
    doc.text(20, 55, 'Summary')
    doc.line(19, 56, 42, 56);
    doc.setFont("times", "normal");
    doc.setFontSize(11);
    doc.autoTable({
        startY: 60,
        html: '#tablaSummary1',
        styles: {overflow: 'hidden'},
        margin: {right: 125},
        theme: 'plain'
    });
    doc.autoTable({
        startY: 60,
        html: '#tablaSummary2',
        styles: {overflow: 'hidden'},
        margin: {left: 125},
        theme: 'plain'
    });

    // BEST CONFIGURATION
    doc.setFont("times", "bold");
    doc.setFontSize(14);
    doc.text(20, 130, 'Best Configuration')
    doc.line(19, 131, 63, 131);
    doc.setFont("times", "normal");
    doc.setFontSize(9);
    source = $('#boxPlotBestConfiguration').children('img')[0].src;

    await loadImage(source).then(formatedImage =>{
        doc.addImage(formatedImage, 119, 140, 60, 70);
        console.log('Add image')
    })

    var bestConfiguration = formatBestConfiguration();
    var yLine = 140;
    var pageHeight = 257;
    for(i = 0; i < bestConfiguration.length; i++)
    {
        doc.text(20, yLine, bestConfiguration[i])
        if(i >= 20 && i < (bestConfiguration.length-1))
        {
            doc.text(125, yLine, bestConfiguration[i+1])
            i++;
        }
        yLine += 4
        if(pageHeight <=  yLine)
        {
            doc.setFont("times", "bold");
            doc.setFontSize(16);
            doc.text(72, 20, 'IRACE Autogenerated report');
            doc.setFont("times", "normal");
            doc.setFontSize(9);
            yLine = 30;
            pageHeight = 265;
            doc.addPage();
            doc.setPage(doc.internal.getNumberOfPages())
        }
    }

    doc.setProperties({
        title: 'IRACE Report',	
        author: 'IRACE-GUI',
        creator: 'IRACE-GUI'
    });

    console.log('Save PDF');
    doc.save('IRACE' + date.getTime() + '.pdf');
}

function formatBestConfiguration()
{
    var data = document.getElementById('bestConfigurationsDetails').innerHTML.replace(/<[^>]*>/g, "\n").replace(/♛|➔/g, "").split('\n');
    var formatedData = [];
    var index = 0;
    for(i = 0; i < data.length; i++)
        if(data[i] != "")
        {
            formatedData[index] = data[i];
            index++
        }
    return formatedData;
}

function loadImage(src)
{
    return new Promise((resolve, reject) => {
        let img = new Image(),
            canvas = document.createElement("canvas"),
            ctx = canvas.getContext("2d");
            // upscale the canvas content
            canvas.width = 550 * devicePixelRatio;
            canvas.height = 405 * devicePixelRatio;
            // downscale the presentation
            canvas.style.width = (canvas.width / devicePixelRatio).toString() + "px";
            canvas.style.height = (canvas.height / devicePixelRatio).toString() + "px";
        img.onload = () => {
            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);
            var imgData = canvas.toDataURL('image/jpeg');
            resolve(imgData)
        }
        img.onerror = reject
        img.src = src
    })
}